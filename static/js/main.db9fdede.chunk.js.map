{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","src","alt","CardList","monsters","this","props","map","key","Component","SearchBox","placeholder","handleChange","onChange","type","App","state","searchField","e","setState","target","value","fetch","res","json","filteredMonsters","filter","monster","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uWAIaA,G,YAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAKC,EAAP,EAAOA,GAAGC,EAAV,EAAUA,MAAV,OACnB,yBAAKC,UAAU,kBACd,yBAAKC,IAAG,+BAA0BH,EAA1B,0BAAsDI,IAAI,YAClE,4BAAKL,EAAL,KACA,2BAAIE,MCJOI,EAAb,uKAEU,IACAC,EAAWC,KAAKC,MAAhBF,SAER,OACC,yBAAKJ,UAAU,aACbI,EAASG,KAAI,gBAAGT,EAAH,EAAGA,GAAID,EAAP,EAAOA,KAAME,EAAb,EAAaA,MAAb,OAAyB,kBAAC,EAAD,CAAMA,MAAOA,EAAOD,GAAIA,EAAIU,IAAKV,EAAID,KAAMA,YAPtF,GAA8BY,aCAjBC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACxB,2BAAOZ,UAAU,SAASW,YAAaA,EAAaE,SAAUD,EAAcE,KAAK,aC8BnEC,G,kNA7BbC,MAAM,CACJZ,SAAU,GACVa,YAAa,I,EASfL,aAAa,SAACM,GACX,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,oMANvBC,MAAM,8C,cAAhBC,E,gBACgBA,EAAIC,O,OAApBpB,E,OACNC,KAAKc,SAAS,CAAEf,a,qIAQT,IAAD,EACuCC,KAAKW,MAA1CZ,EADF,EACEA,SAAUa,EADZ,EACYA,YACZQ,GAFA,EACyBb,aACNR,EAASsB,QAAO,SAAAC,GAAO,OAAGA,EAAQ9B,KAAK+B,cAAcC,SAASZ,OACvF,OACE,yBAAKjB,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcP,KAAKO,eAC5D,kBAAC,EAAD,CAAUR,SAAUqB,S,GAxBVhB,cCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.db9fdede.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './card.styles.css'\r\n\r\n\r\nexport const Card = ({name,id,email}) =>(\r\n <div className=\"card-container\">\r\n  <img src={`https://robohash.org/${id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n  <h2>{name} </h2>\r\n  <p>{email}</p>\r\n </div>\r\n)","import React, { Component } from 'react'\r\nimport './card-list.styles.css'\r\nimport {Card } from '../card/card-component'\r\n\r\nexport class CardList extends Component {\r\n\r\n render(){\r\n  const { monsters }=this.props\r\n  \r\n  return (\r\n   <div className=\"card-list\">\r\n    {monsters.map(({ id, name, email }) => <Card email={email} id={id} key={id} name={name} />)}\r\n   </div>\r\n  )\r\n }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport './search-box.styles.css'\r\n\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n <input className=\"search\" placeholder={placeholder} onChange={handleChange} type=\"search\" />\r\n)","  import React, {Component} from 'react';\nimport {CardList}  from './components/card-list/card-list.component'\nimport { SearchBox} from './components/search-box/search-box.component'\nimport './App.css'\n\nclass App extends Component {\n  state={\n    monsters: [],\n    searchField: ''\n  }\n\n  async componentDidMount(){\n    const res=await fetch('https://jsonplaceholder.typicode.com/users')\n    const monsters =await res.json()\n    this.setState({ monsters})\n  }\n  \n  handleChange=(e)=>{\n     this.setState({ searchField: e.target.value })\n  }\n\n  \n  render(){\n    const { monsters, searchField, handleChange}=this.state\n    const filteredMonsters = monsters.filter(monster=> monster.name.toLowerCase().includes(searchField))\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}